var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GBIF2","category":"page"},{"location":"#GBIF2","page":"Home","title":"GBIF2","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GBIF2.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GBIF2","category":"page"},{"location":"#GBIF2.GBIF2","page":"Home","title":"GBIF2.GBIF2","text":"GBIF2\n\n(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage)\n\nThe goals of GBIF2 is to follow the GBIF api as completely and correctly as possible.\n\nIts main design features are:\n\nSingle results are returned with type Occurrence or Species,  with all of the GBIF fields available using object.fieldname,   These return missing if not returned by a specific query.\nMultiple results are returned as a Tables.jl compatible Table of Occurrence or Species rows.    This Table can be converted to a DataFrame or writted directly to disk using CSV.jl and similar packages.\nAll GBIF enum keys are checked for correctness before querying so that only correct queries can be sent.    Clear messages point to errors in queries.\nA limit above 300 items at a time is allowed, unlike in the original API, by making   multiple reuests and joining the results.\nFor even larger queries, download requests are handled with gbif.org account authentication.\n\nA quick example\n\njulia> using GBIF2, DataFrames\n\n# Basic species match with `species_match`:\njulia> sp = species_match(\"Lalage newtoni\");\n\njulia> sp.species\n\"Coracina newtoni\"\n\njulia> sp.synonym\ntrue\n\njulia> sp.vernacularName\nmissing\n\n# Get a more detailed object with `species`:\njulia> sp_detailed = species(sp);\n\njulia> sp_detailed.vernacularName\n\"Reunion Cuckooshrike\"\n\n# Get the first 2000 occurrences for the species from 2000 to 2020, on reunion:\njulia> oc = occurrence_search(sp;\n           limit=2000, country=:RE, hasCoordinate=true, year=(2000,2020)\n       ) |> DataFrame\n2000×83 DataFrame\n  Row │ decimalLongitude  decimalLatitude  year    month   day\n      │ Float64?          Float64?         Int64?  Int64?  Int64?\n──────┼────────────────────────────────────────────────────────────\n    1 │          55.5085         -21.0192    2020       1      14\n    2 │          55.4133         -20.928     2020       1      23\n    3 │          55.4133         -20.928     2020       1      16\n    4 │          55.5085         -21.0192    2020       1      14\n    5 │          55.4123         -21.0184    2020       1      13\n    6 │          55.4133         -20.928     2020       1      28\n    7 │          55.4133         -20.928     2020       1      16\n  ⋮   │        ⋮                 ⋮           ⋮       ⋮       ⋮\n 1994 │          55.4133         -20.928     2017      10      29\n 1995 │          55.4123         -21.0184    2017      10      25\n 1996 │          55.4123         -21.0184    2017      10      25\n 1997 │          55.4123         -21.0184    2017      10      17\n 1998 │          55.4123         -21.0184    2017      10      25\n 1999 │          55.4123         -21.0184    2017      10      25\n 2000 │          55.4123         -21.0184    2017      10      25\n\n\n\n\n\n","category":"module"},{"location":"","page":"Home","title":"Home","text":"There are a number of ways to query the GBIF database for species,  returning different numbers of results and amounts of data.","category":"page"},{"location":"#Species","page":"Home","title":"Species","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Species objects and queries correspond closely to the GBIF species api.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Species\nspecies_match\nspecies\nspecies_search\nspecies_list","category":"page"},{"location":"#GBIF2.Species","page":"Home","title":"GBIF2.Species","text":"Species\n\nWrapper object for information returned by species, species_list, species_match or species_search queries. These often are species, but a more correctly taxa, as it may be e.g. \"Aves\" for all birds. We use Species for naming consistency with the GBIF API.\n\nSpecies also serve as rows in Table, and are converted to rows in a DataFrame or CSV automatically by the Tables.jl interface.\n\nSpecies properties are accessed with ., e.g. sp.kingdom. Note that these queries do not all return all properties, and not all records contain all properties in any case. Missing properties simply return missing.\n\nThe possible properties of a Species object are: (:kingdom, :phylum, :class, :order, :family, :genus, :species, :key, :nubKey, :nameKey, :taxonID, :sourceTaxonKey, :kingdomKey, :phylumKey, :classKey, :orderKey, :familyKey, :genusKey, :speciesKey, :datasetKey, :constituentKey, :scientificName, :canonicalName, :vernacularName, :parentKey, :parent, :basionymKey, :basionym, :authorship, :nameType, :rank, :origin, :taxonomicStatus, :nomenclaturalStatus, :remarks, :publishedIn, :numDescendants, :lastCrawled, :lastInterpreted, :issues, :synonym)\n\n\n\n\n\n","category":"type"},{"location":"#GBIF2.species_match","page":"Home","title":"GBIF2.species_match","text":"species_match(; kw...)\n\nQuery the GBIF species/match api, returning the single closest Species using fuzzy search.\n\nThe results are not particularly detailed, this can be improved by calling  species(res) on the result of species_match to query for the full dataset.\n\nExample\n\nusing GBIF2\nsp = species_match(\"Lalage newtoni\")\n\n# output\nGBIF2.Species({\n           \"usageKey\": 8385394,\n   \"acceptedUsageKey\": 2486791,\n     \"scientificName\": \"Lalage newtoni (Pollen, 1866)\",\n      \"canonicalName\": \"Lalage newtoni\",\n               \"rank\": \"SPECIES\",\n             \"status\": \"SYNONYM\",\n         \"confidence\": 98,\n          \"matchType\": \"EXACT\",\n            \"kingdom\": \"Animalia\",\n             \"phylum\": \"Chordata\",\n              \"order\": \"Passeriformes\",\n             \"family\": \"Campephagidae\",\n              \"genus\": \"Coracina\",\n            \"species\": \"Coracina newtoni\",\n         \"kingdomKey\": 1,\n          \"phylumKey\": 44,\n           \"classKey\": 212,\n           \"orderKey\": 729,\n          \"familyKey\": 9284,\n           \"genusKey\": 2482359,\n         \"speciesKey\": 2486791,\n            \"synonym\": true,\n              \"class\": \"Aves\"\n})\n\nKeywords\n\nWe use keywords exactly as in the GBIF api.\n\nYou can find keyword enum values with the [GBIF2.enum](@ref) function.\n\nrank: Filters by taxonomic rank as given in our Rank enum\nname: Name of the species\nstrict: If true it (fuzzy) matches only the given name, but never a taxon in the upper classification\nverbose: If true it shows alternative matches which were considered but then rejected\nkingdom: Optional kingdom classification accepting a canonical name.\nphylum: Optional phylum classification accepting a canonical name.\nclass: Optional class classification accepting a canonical name.\norder: Optional order classification accepting a canonical name.\nfamily: Optional family classification accepting a canonical name.\ngenus: Optional genus classification accepting a canonical name.\n\n\n\n\n\n","category":"function"},{"location":"#GBIF2.species","page":"Home","title":"GBIF2.species","text":"species(key; kw...)\nspecies(key, resulttype; kw...)\n\nQuery the GBIF species api, returning a single Species.\n\nkey: a species key, or Species object from another search that a key can be   obtained from.\nresulttype: set this so that instead of a Species, species will return an   object in (:verbatim, :name, :parents, :children, :related, :synonyms, :combinations, :descriptions, :distributions, :media, :references, :speciesProfiles, :vernacularNames, :typeSpecimens). The return value will be a raw JSON3.Object,   but itspropertynames` can be checked and used to access data.\n\nExample\n\nHere we find a species with species_search, and then obtain the complete record with species.\n\njulia> using GBIF2\njulia> tbl = species_search(\"Falco punctatus\")\n20-element GBIF2.Table{GBIF2.Species, JSON3.Array{JSON3.Object, Vector{UInt8}, SubArray{\nUInt64, 1, Vector{UInt64}, Tuple{UnitRange{Int64}}, true}}}\n┌──────────┬──────────┬───────────────┬───────────────┬────────────┬─────────┬──────────\n│  kingdom │   phylum │         class │         order │     family │   genus │         ⋯\n│  String? │  String? │       String? │       String? │    String? │ String? │         ⋯\n├──────────┼──────────┼───────────────┼───────────────┼────────────┼─────────┼──────────\n│ Animalia │  missing │          Aves │ Falconiformes │ Falconidae │ missing │ Falco p ⋯\n│ Animalia │  missing │          Aves │       missing │ Falconidae │   Falco │ Falco p ⋯\n│  missing │  missing │          Aves │ Falconiformes │ Falconidae │   Falco │ Falco p ⋯\n│  missing │ Chordata │       missing │       missing │ Falconidae │   Falco │ Falco p ⋯\n│ Animalia │ Chordata │          Aves │ Falconiformes │ Falconidae │   Falco │ Falco p ⋯\n│ Animalia │ Chordata │          Aves │ Falconiformes │ Falconidae │   Falco │ Falco p ⋯\n│  Metazoa │ Chordata │          Aves │ Falconiformes │ Falconidae │   Falco │ Falco p ⋯\n│ Animalia │  missing │       missing │ Falconiformes │ Falconidae │ missing │ Falco p ⋯\n│  Metazoa │ Chordata │          Aves │ Falconiformes │ Falconidae │   Falco │ Falco p ⋯\n│    ⋮     │    ⋮     │       ⋮       │       ⋮       │     ⋮      │    ⋮    │         ⋱\n└──────────┴──────────┴───────────────┴───────────────┴────────────┴─────────┴──────────\n                                                           35 columns and 11 rows omitted\n\n\nAnd retrieve all the fields for one of the matches.\n\njulia> species(tbl[6])\nGBIF2.Species({\n                   \"key\": 102091853,\n                \"nubKey\": 2481005,\n               \"nameKey\": 4400647,\n               \"taxonID\": \"175650\",\n               \"kingdom\": \"Animalia\",\n                \"phylum\": \"Chordata\",\n                 \"order\": \"Falconiformes\",\n                \"family\": \"Falconidae\",\n                 \"genus\": \"Falco\",\n               \"species\": \"Falco punctatus\",\n            \"kingdomKey\": 101683523,\n             \"phylumKey\": 102017110,\n              \"classKey\": 102085317,\n              \"orderKey\": 102091762,\n             \"familyKey\": 102091763,\n              \"genusKey\": 102091765,\n            \"speciesKey\": 102091853,\n            \"datasetKey\": \"9ca92552-f23a-41a8-a140-01abaa31c931\",\n             \"parentKey\": 102091765,\n                \"parent\": \"Falco\",\n        \"scientificName\": \"Falco punctatus Temminck, 1821\",\n         \"canonicalName\": \"Falco punctatus\",\n        \"vernacularName\": \"Mauritius Kestrel\",\n            \"authorship\": \"Temminck, 1821\",\n              \"nameType\": \"SCIENTIFIC\",\n                  \"rank\": \"SPECIES\",\n                \"origin\": \"SOURCE\",\n       \"taxonomicStatus\": \"ACCEPTED\",\n   \"nomenclaturalStatus\": [],\n        \"numDescendants\": 0,\n           \"lastCrawled\": \"2022-10-10T18:15:33.989+00:00\",\n       \"lastInterpreted\": \"2022-10-10T19:16:16.841+00:00\",\n                \"issues\": [\n                            \"SCIENTIFIC_NAME_ASSEMBLED\"\n                          ],\n               \"synonym\": false,\n                 \"class\": \"Aves\"\n})\n\nKeyword arguments\n\nlanguage: can be specified for a single argument or with second argument in   (:parents, :children, :related, :synonyms). \ndatasetKey: can be specified, with a second argument :related.\n\n\n\n\n\n","category":"function"},{"location":"#GBIF2.species_search","page":"Home","title":"GBIF2.species_search","text":"species_search([q]; kw...)\n\nQuery the GBIF species/search api, returning many results in a GBIF2.Table.\n\nExample\n\nusing GBIF2\nsp = species_search(\"Psittacula eques\")\n\n# output\n20-element GBIF2.Table{GBIF2.Species, JSON3.Array{JSON3.Object, Vector{UInt8}, SubArray{UInt64, 1,\nVector{UInt64}, Tuple{UnitRange{Int64}}, true}}}\n┌──────────┬──────────┬────────────────┬────────────────┬───────────────┬──────────────┬──\n│  kingdom │   phylum │          class │          order │        family │        genus │ ⋯\n│  String? │  String? │        String? │        String? │       String? │      String? │ ⋯\n├──────────┼──────────┼────────────────┼────────────────┼───────────────┼──────────────┼──\n│ Animalia │ Chordata │           Aves │ Psittaciformes │ Psittaculidae │   Psittacula │ ⋯\n│ Animalia │  missing │           Aves │ Psittaciformes │ Psittaculidae │      missing │ ⋯\n│  Metazoa │ Chordata │           Aves │ Psittaciformes │   Psittacidae │   Psittacula │ ⋯\n│ Animalia │  missing │           Aves │ Psittaciformes │ Psittaculidae │      missing │ ⋯\n│ Animalia │  missing │           Aves │ Psittaciformes │ Psittaculidae │      missing │ ⋯\n│ Animalia │  missing │        missing │ Psittaciformes │ Psittaculidae │      missing │ ⋯\n│  Metazoa │ Chordata │           Aves │ Psittaciformes │   Psittacidae │   Psittacula │ ⋯\n│  missing │  missing │        missing │        missing │       missing │   Psittacula │ ⋯\n│ Animalia │ Chordata │           Aves │ Psittaciformes │ Psittaculidae │   Psittacula │ ⋯\n│ Animalia │  missing │           Aves │        missing │   Psittacidae │   Psittacula │ ⋯\n│  Metazoa │ Chordata │           Aves │ Psittaciformes │   Psittacidae │   Psittacula │ ⋯\n│ Animalia │ Chordata │           Aves │ Psittaciformes │ Psittaculidae │   Psittacula │ ⋯\n│ ANIMALIA │ CHORDATA │ PSITTACIFORMES │           AVES │   PSITTACIDAE │ Alexandrinus │ ⋯\n│  Metazoa │ Chordata │           Aves │ Psittaciformes │   Psittacidae │   Psittacula │ ⋯\n│ Animalia │ Chordata │           Aves │ Psittaciformes │   Psittacidae │   Psittacula │ ⋯\n│ Animalia │  missing │           Aves │ Psittaciformes │ Psittaculidae │   Psittacula │ ⋯\n│    ⋮     │    ⋮     │       ⋮        │       ⋮        │       ⋮       │      ⋮       │ ⋱\n└──────────┴──────────┴────────────────┴────────────────┴───────────────┴──────────────┴──\n                                                              37 columns and 4 rows omitted\n\nKeyword arguments\n\nWe use keywords exactly as in the GBIF api.\n\nclass: Optional class classification accepting a canonical name.\ndatasetKey: Filters by the checklist dataset key (a uuid)\nfacet: A list of facet names used to retrieve the 100 most frequent values for a field. Allowed facets are :datasetKey, :higherTaxonKey, :rank, :status, :nomenclaturalStatus, isExtinct, :habitat, :threat and :nameType. \nfacetMincount: Used in combination with the facet parameter. Set facetMincount=N to exclude facets with a count less than N, e.g. facet=type, limit=>0, facetMincount=>10000 only shows the type value OCCURRENCE because :CHECKLIST and :METADATA have counts less than 10000. \nfacetMultiselect: Used in combination with the facet parameter. Set facetMultiselect=true to still return counts for values that are not currently filtered, e.g. facet=type, limit=>0, type=>CHECKLIST, facetMultiselect=>true still shows type values OCCURRENCE and METADATA even though type is being filtered by type=:CHECKLIST \nfamily: Optional family classification accepting a canonical name.\ngenus: Optional genus classification accepting a canonical name.\nhabitat: Filters by the habitat. Currently only 3 major biomes are accepted in our Habitat enum\nhighertaxonKey: Filters by any of the higher Linnean rank keys. Note this is within the respective checklist and not searching nub keys across all checklists. \nhl: Set hl=true to highlight terms matching the query when in fulltext search fields. The highlight will be an emphasis tag of class 'gbifH1' e.g. q=\"plant\", hl=>true. Fulltext search fields include title, keyword, country, publishing country, publishing organization title, hosting organization title, and description. One additional full text field is searched which includes information from metadata documents, but the text of this field is not returned in the response \nisExtinct: Filters by extinction status (a boolean, e.g. isExtinct=>true)\nissue: A specific indexing issue as defined in our NameUsageIssue enum\nkingdom: Optional kingdom classification accepting a canonical name.\nlanguage: Language for vernacular names, given as an ISO 639-1 two-letter code from our\nnameType: Filters by the name type as given in our NameType enum\nnomenclaturalStatus: Not yet implemented, but will eventually allow for filtering by a nomenclatural status enum\norder: Optional order classification accepting a canonical name.\nphylum: Optional phylum classification accepting a canonical name.\nq: Simple full text search parameter. The value for this parameter can be a simple word or a phrase. Wildcards are not supported \nrank: Filters by taxonomic rank as given in our Rank enum\nsourceId: Filters by the source identifier\nstatus: Filters by the taxonomic status as given in our TaxonomicStatus enum\nstrict: If true it (fuzzy) matches only the given name, but never a taxon in the upper classification\nthreat: Filters by the taxonomic threat status as given in our ThreatStatus enum\nverbose: If true it shows alternative matches which were considered but then rejected\noffset: Offset to start results from\nlimit: The maximum number of results to return. This can't be greater than 300, any value greater is set to 300.\n\n\n\n\n\n","category":"function"},{"location":"#GBIF2.species_list","page":"Home","title":"GBIF2.species_list","text":"species_list(; kw...)\nspecies_list(key; kw...)\nspecies_list(key, resulttype; kw...)\n\nQuery the GBIF species_list api, returning a table of Species that exactly match your query.\n\nExample\n\nusing GBIF2\nspecies_list(; name=\"Lalage newtoni\")\n\n# output\n8-element GBIF2.Table{GBIF2.Species, JSON3.Array{JSON3.Object, Vector{UInt8}, SubArray{UInt64, 1, Vector{UInt64}, Tuple{UnitRange{Int64}}, true}}}\n┌──────────┬──────────┬───────────────┬───────────────┬───────────────┬──────────┬──────────────────┬───────────┬─────────┬──────────┬──────────────┬────────────────┬───────\n│  kingdom │   phylum │         class │         order │        family │    genus │          species │       key │  nubKey │  nameKey │      taxonID │ sourceTaxonKey │ king ⋯\n│  String? │  String? │       String? │       String? │       String? │  String? │          String? │    Int64? │  Int64? │   Int64? │      String? │         Int64? │      ⋯\n├──────────┼──────────┼───────────────┼───────────────┼───────────────┼──────────┼──────────────────┼───────────┼─────────┼──────────┼──────────────┼────────────────┼───────\n│ Animalia │ Chordata │          Aves │ Passeriformes │ Campephagidae │ Coracina │ Coracina newtoni │   8385394 │ missing │ 18882488 │ gbif:8385394 │      176651982 │      ⋯\n│ Animalia │  missing │          Aves │       missing │ Campephagidae │   Lalage │   Lalage newtoni │ 100144670 │ 8385394 │  5976204 │        06014 │        missing │  128 ⋯\n│ Animalia │  missing │          Aves │ Passeriformes │ Campephagidae │  missing │   Lalage newtoni │ 133165079 │ 8385394 │  5976204 │        18380 │        missing │  135 ⋯\n│ Animalia │ Chordata │          Aves │ Passeriformes │ Campephagidae │   Lalage │   Lalage newtoni │ 161400685 │ 8385394 │ 18882488 │       895898 │        missing │  134 ⋯\n│  missing │  missing │       missing │       missing │       missing │ Bossiaea │   Lalage newtoni │ 165585935 │ missing │ 18882488 │      6924877 │        missing │    m ⋯\n│ Animalia │  missing │          Aves │ Passeriformes │ Campephagidae │   Lalage │   Lalage newtoni │ 165923305 │ 8385394 │ 18882488 │        19393 │        missing │  100 ⋯\n│ Animalia │ Chordata │          Aves │ Passeriformes │ Campephagidae │   Lalage │   Lalage newtoni │ 168010293 │ 8385394 │  5976204 │       181376 │        missing │  167 ⋯\n│ Animalia │ Chordata │ Passeriformes │          Aves │ Campephagidae │   Lalage │   Lalage newtoni │ 176651982 │ 8385394 │ 18882488 │     22706569 │        missing │  202 ⋯\n└──────────┴──────────┴───────────────┴───────────────┴───────────────┴──────────┴──────────────────┴───────────┴─────────┴──────────┴──────────────┴────────────────┴───────\n\nKeyword arguments\n\nWe use keywords exactly as in the GBIF api.\n\nYou can find keyword enum values with the [GBIF2.enum](@ref) function.\n\nlanguage: Language for vernacular names, given as an ISO 639-1 two-letter code from our\ndatasetKey: Filters by the checklist dataset key (a uuid)\nsourceId: Filters by the source identifier\nname: Name of the species\noffset: Offset to start results from\nlimit: The maximum number of results to return. This can't be greater than 300, any value greater is set to 300.\n\n\n\n\n\n","category":"function"},{"location":"#Occurrence","page":"Home","title":"Occurrence","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Occurrence objects and queries correspond closely to the GBIF occurrence api.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Occurrence\noccurrence_search\noccurrence\noccurrence_request\noccurrence_download\noccurrence_count\noccurrence_count_schema\noccurrence_inventory","category":"page"},{"location":"#GBIF2.Occurrence","page":"Home","title":"GBIF2.Occurrence","text":"Occurrence\n\nWrapper object for information returned about an occurrence by occurrence and occurrence_search queries. Occurrence also serves as rows in Table, and is converted to rows in a DataFrame or CSV automatically by the Tables.jl interface.\n\nOccurrence properties are accessed with ., e.g. oc.country. Note that these queries do not all return all properties, and not all records contain all properties in any case. Missing properties simply return missing.\n\nThe possible properties of an Occurrence object are: (:decimalLongitude, :decimalLatitude, :year, :month, :day, :kingdom, :phylum, :class, :order, :family, :genus, :species, :genericName, :taxonRank, :taxonomicStatus, :iucnRedListCategory, :elevation, :continent, :stateProvince, :eventDate, :key, :datasetKey, :publishingOrgKey, :installationKey, :publishingCountry, :protocol, :lastCrawled, :lastParsed, :crawlId, :hostingOrganizationKey, :extensions, :basisOfRecord, :individualCount, :occurrenceStatus, :taxonKey, :kingdomKey, :phylumKey, :classKey, :orderKey, :familyKey, :genusKey, :acceptedTaxonKey, :scientificName, :acceptedScientificName, :issues, :lastInterpreted, :license, :identifiers, :media, :facts, :relations, :gadm, :institutionKey, :isInCluster, :datasetName, :recordedBy, :inCluster, :geodeticDatum, :countryCode, :recordedByIDs, :identifiedByIDs, :country, :rightsHolder, :nomenclaturalStatus, :recordNumber, :identifier, :nomenclaturalCode, :county, :locality, :fieldNumber, :collectionCode, :gbifID, :occurrenceID, :type, :taxonID, :catalogNumber, :institutionCode, :ownerInstitutionCode, :bibliographicCitation, :collectionID, :earliestEraOrLowestErathem, :earliestPeriodOrLowestSystem, :higherClassification)\n\n\n\n\n\n","category":"type"},{"location":"#GBIF2.occurrence_search","page":"Home","title":"GBIF2.occurrence_search","text":"occurrence_search(species::Species; kw...)\noccurrence_search([q]; kw...)\noccurrence_search(q, returntype; limit...)\n\nSearch for occurrences, returning a Table{Occurrence} table.\n\nExample\n\nHere we find a species with species_match, and then retrieve all the occurrences with occurrence_search.\n\njulia> \nusing GBIF2\n\njulia> \nsp = species_match(\"Falco punctatus\");\n\njulia> \nocs = occurrence_search(sp; continent=:AFRICA, limit=1000)\n[ Info: 522 occurrences found, limit was 1000\n522-element GBIF2.Table{GBIF2.Occurrence, Vector{JSON3.Object}}\n┌──────────────────┬─────────────────┬────────┬────────┬────────┬────────────\n│ decimalLongitude │ decimalLatitude │   year │  month │    day │  kingdom  ⋯\n│         Float64? │        Float64? │ Int64? │ Int64? │ Int64? │  String?  ⋯\n├──────────────────┼─────────────────┼────────┼────────┼────────┼────────────\n│          missing │         missing │   2012 │      8 │     18 │ Animalia  ⋯\n│          missing │         missing │   2010 │      1 │     29 │ Animalia  ⋯\n│          57.2452 │        -20.2239 │   2009 │     10 │     26 │ Animalia  ⋯\n│          57.2452 │        -20.2239 │   2009 │     11 │      5 │ Animalia  ⋯\n│          57.2452 │        -20.2239 │   2009 │     11 │      5 │ Animalia  ⋯\n│          57.2452 │        -20.2239 │   2009 │     11 │      4 │ Animalia  ⋯\n│          57.2452 │        -20.2239 │   2009 │     11 │      5 │ Animalia  ⋯\n│          57.2452 │        -20.2239 │   2009 │     11 │      4 │ Animalia  ⋯\n│          57.7667 │          -19.85 │   2007 │      6 │     19 │ Animalia  ⋯\n│          57.7667 │          -19.85 │   2007 │      6 │     19 │ Animalia  ⋯\n│          57.7667 │          -19.85 │   2007 │      6 │     19 │ Animalia  ⋯\n│          57.7667 │          -19.85 │   2007 │      6 │     19 │ Animalia  ⋯\n│          57.7667 │          -19.85 │   2007 │      6 │     19 │ Animalia  ⋯\n│          57.7667 │          -19.85 │   2007 │      6 │     19 │ Animalia  ⋯\n│          57.7667 │          -19.85 │   2007 │      6 │     19 │ Animalia  ⋯\n│        ⋮         │        ⋮        │   ⋮    │   ⋮    │   ⋮    │    ⋮      ⋱\n└──────────────────┴─────────────────┴────────┴────────┴────────┴────────────\n                                              78 columns and 507 rows omitted\n\nArguments\n\nq: a search query.\nspecies: if the first value is a species, search keywords will be retrieved from it.\nreturntype: modify the returntype, with a Symbol from :\n:catalogNumber: Search that returns matching catalog numbers. Table are ordered by relevance.\n:collectionCode: Search that returns matching collection codes. Table are ordered by relevance.\n:occurrenceId: Search that returns matching occurrence identifiers. Table are ordered by relevance.\n:recordedBy: Search that returns matching collector names. Table are ordered by relevance.\n:recordNumber: Search that returns matching record numbers. Table are ordered by relevance.\n:institutionCode: Search that returns matching institution codes. Table are ordered by relevance.\n\nKeywords\n\nWe use parameters exactly as in the GBIF api.\n\nYou can find keyword enum values with the [GBIF2.enum](@ref) function.\n\nGBIF range queries work by putting values in a Tuple, e.g. elevation=(10, 100).\n\nbasisOfRecord: Basis of record, as defined in our BasisOfRecord enum\ncatalogNumber: An identifier of any form assigned by the source within a physical collection or digital dataset for the record which may not be unique, but should be fairly unique in combination with the institution and collection code.\nclassKey: Class classification key.\ncollectionCode: An identifier of any form assigned by the source to identify the physical collection or digital dataset uniquely within the context of an institution.\ncontinent: Continent, as defined in our Continent enum\ncoordinateUncertaintyInMeters: The horizontal distance (in meters) from the given decimalLatitude and decimalLongitude describing the smallest circle containing the whole of the Location. Supports range queries.\ncountry: The 2-letter country code (as per ISO-3166-1) of the country in which the occurrence was recorded.\ncrawlId: Crawl attempt that harvested this record.\ndatasetId: The ID of the dataset.\ndatasetKey: The occurrence dataset key (a uuid).\ndatasetName: The name of the dataset.\ndecimalLatitude: Latitude in decimals between -90 and 90 based on WGS 84. Supports range queries.\ndecimalLongitude: Longitude in decimals between -180 and 180 based on WGS 84. Supports range queries.\ndepth: Depth in meters relative to altitude. For example 10 meters below a lake surface with given altitude. Supports range queries.\nelevation: Elevation (altitude) in meters above sea level. Supports range queries.\nestablishmentMeans: EstablishmentMeans, as defined in our EstablishmentMeans enum\neventDate: Occurrence date in ISO 8601 format: yyyy, yyyy-MM, yyyy-MM-dd, or MM-dd. Supports range queries.\neventId: An identifier for the information associated with a sampling event.\nfacet: A facet name used to retrieve the most frequent values for a field. Facets are allowed for all the parameters except for: eventDate, geometry, lastInterpreted, locality, organismId, stateProvince, waterBody. This parameter may by repeated to request multiple facets, as in this example /occurrence/search?facet=datasetKey&facet=basisOfRecord&limit=0\nfacetMincount: Used in combination with the facet parameter. Set facetMincountN to exclude facets with a count less than N, e.g. /search?facet=type&limit=0&facetMincount=10000 only shows the type value 'OCCURRENCE' because 'CHECKLIST' and 'METADATA' have counts less than 10000.\nfacetMultiselect: Used in combination with the facet parameter. Set facetMultiselect=true to still return counts for values that are not currently filtered, e.g. /search?facet=type&limit=0&type=CHECKLIST&facetMultiselect=true still shows type values 'OCCURRENCE' and 'METADATA' even though type is being filtered by type=CHECKLIST\nfacetOffset: \nfacetLimit: Facet parameters allow paging requests using the parameters facetOffset and facetLimit as this example /occurrence/search?facet=datasetKey&datasetKey.facetLimit=5&datasetKey.facetOffset=10&limit=0\nfamilyKey: Family classification key.\nformat: Export format, accepts TSV(default) and CSV\nfromDate: Start partial date of a date range, accepts the format yyyy-MM, for example: 2015-11\ngadmGid: A GADM geographic identifier at any level, for example AGO, AGO.11, AGO.1.11 or AGO.1.1.1_1\ngadmLevel: A GADM region level, valid values range from 0 to 3\ngadmLevel0Gid: A GADM geographic identifier at the zero level, for example AGO\ngadmLevel1Gid: A GADM geographic identifier at the first level, for example AGO.1_1\ngadmLevel2Gid: A GADM geographic identifier at the second level, for example AFG.1.1_1\ngadmLevel3Gid: A GADM geographic identifier at the third level, for example AFG.1.1.1_1\ngenusKey: Genus classification key.\ngeoDistance: Filters to match occurrence records with coordinate values within a specified distance of a coordinate, it supports units: in (inch), yd (yards), ft (feet), km (kilometers), mmi (nautical miles), mm (millimeters), cm centimeters, mi (miles), m (meters), for example /occurrence/search?geoDistance=90,100,5km\ngeometry: Searches for occurrences inside a polygon described in Well Known Text (WKT) format. Only POINT, LINESTRING, LINEARRING, POLYGON and MULTIPOLYGON are accepted WKT types. For example, a shape written as POLYGON ((30.1 10.1, 40 40, 20 40, 10 20, 30.1 10.1)) would be queried as is, i.e. /occurrence/search?geometry=POLYGON((30.1 10.1, 40 40, 20 40, 10 20, 30.1 10.1)). Polygons must have anticlockwise ordering of points, or will give unpredictable results. (A clockwise polygon represents the opposite area: the Earth's surface with a 'hole' in it. Such queries are not supported.)\nhasCoordinate: Limits searches to occurrence records which contain a value in both latitude and longitude (i.e. hasCoordinate=true limits to occurrence records with coordinate values and `hasCoordinate=false limits to occurrence records without coordinate values).\nhasGeospatialIssue: Includes/excludes occurrence records which contain spatial issues (as determined in our record interpretation), i.e. hasGeospatialIssue=true returns only those records with spatial issues while hasGeospatialIssue=false includes only records without spatial issues. The absence of this parameter returns any record with or without spatial issues.\nhl: Set hl=true to highlight terms matching the query when in fulltext search fields. The highlight will be an emphasis tag of class 'gbifH1' e.g. /search?q=plant&hl=true. Fulltext search fields include: title, keyword, country, publishing country, publishing organization title, hosting organization title, and description. One additional full text field is searched which includes information from metadata documents, but the text of this field is not returned in the response.\nidentifiedBy: The person who provided the taxonomic identification of the occurrence.\nidentifiedByID: Identifier (e.g. ORCID) for the person who provided the taxonomic identification of the occurrence.\ninstitutionCode: An identifier of any form assigned by the source to identify the institution the record belongs to. Not guaranteed to be unique.\nissue: A specific interpretation issue as defined in our OccurrenceIssue enum\nkingdomKey: Kingdom classification key.\nlastInterpreted: This date the record was last modified in GBIF, in ISO 8601 format: yyyy, yyyy-MM, yyyy-MM-dd, or MM-dd. Supports range queries. Note that this is the date the record was last changed in GBIF, not necessarily the date the record was first/last changed by the publisher. Data is re-interpreted when we change the taxonomic backbone, geographic data sources, or interpretation processes.\nlicense: The type license applied to the dataset or record.\nlimit: The maximum number of results to return. This can't be greater than 300, any value greater is set to 300.\nlocality: The specific description of the place.\nmediaType: The kind of multimedia associated with an occurrence as defined in our MediaType enum\nmodified: The most recent date-time on which the resource was changed, according to the publisher\nmonth: The month of the year, starting with 1 for January. Supports range queries.\nnetworkKey: The GBIF Network to which the occurrence belongs.\noccurrenceId: A single globally unique identifier for the occurrence record as provided by the publisher.\noccurrenceStatus: Either 'ABSENT' or 'PRESENT'; the presence or absence of the occurrence.\noffset: Offset to start results from\norderKey: Order classification key.\norganismId: An identifier for the Organism instance (as opposed to a particular digital record of the Organism). May be a globally unique identifier or an identifier specific to the data set.\norganismQuantity: A number or enumeration value for the quantity of organisms.\norganismQuantityType: The type of quantification system used for the quantity of organisms.\notherCatalogNumbers: Previous or alternate fully qualified catalog numbers.\nphylumKey: Phylum classification key.\npreparations: Preparation or preservation method for a specimen.\nprogramme: A group of activities, often associated with a specific funding stream, such as the GBIF BID programme.\nprojectId: The identifier for a project, which is often assigned by a funded programme.\nprotocol: Protocol or mechanism used to provide the occurrence record.\npublishingCountry: The 2-letter country code (as per ISO-3166-1) of the owining organization's country.\npublishingOrg: The publishing organization key (a uuid).\npublishingOrgKey: The publishing organization key (a uuid).\nq: Simple search parameter. The value for this parameter can be a simple word or a phrase.\nrecordedBy: The person who recorded the occurrence.\nrecordedByID: Identifier (e.g. ORCID) for the person who recorded the occurrence.\nrecordNumber: An identifier given to the record at the time it was recorded in the field.\nrelativeOrganismQuantity: The relative measurement of the quantity of the organism (i.e. without absolute units).\nrepatriated: Searches for records whose publishing country is different to the country where the record was recorded in.\nsampleSizeUnit: The unit of measurement of the size (time duration, length, area, or volume) of a sample in a sampling event.\nsampleSizeValue: A numeric value for a measurement of the size (time duration, length, area, or volume) of a sample in a sampling event.\nsamplingProtocol: The name of, reference to, or description of the method or protocol used during a sampling event\nscientificName: A scientific name from the GBIF backbone. All included and synonym taxa are included in the search. Under the hood a call to the species match service is done first to retrieve a taxonKey. Only unique scientific names will return results, homonyms (many monomials) return nothing! Consider to use the taxonKey parameter instead and the species match service directly\nspeciesKey: Species classification key.\nstateProvince: he name of the next smaller administrative region than country (state, province, canton, department, region, etc.) in which the Location occurs.\nsubgenusKey: Subgenus classification key.\ntaxonKey: A taxon key from the GBIF backbone. All included and synonym taxa are included in the search, so a search for aves with taxonKey=212 (i.e. coordinate_search(; taxonKey=212)) will match all birds, no matter which species.\ntoDate: End partial date of a date range, accepts the format yyyy-MM, for example: 2019-12\ntypeStatus: Nomenclatural type (type status, typified scientific name, publication) applied to the subject.\nuserCountry: Country country of the user who made the requested\nverbatimScientificName: The scientific name provided to GBIF by the data publisher, before interpretation and processing by GBIF.\nverbatimTaxonId: The taxon identifier provided to GBIF by the data publisher.\nwaterBody: The name of the water body in which the Locations occurs.\nyear: The 4 digit year. A year of 98 will be interpreted as AD 98. Supports range queries.\n\n\n\n\n\n","category":"function"},{"location":"#GBIF2.occurrence","page":"Home","title":"GBIF2.occurrence","text":"occurrence(key; [returntype])\noccurrence(occurrence::Occurrence; [returntype])\noccurrence(datasetKey, occurrenceID; [returntype])\n\nRetrieve a single Occurrence by its key, by datasetKey and occurrenceID or by passing in an Occurrence object.\n\nKeyword\n\nreturntype modifies the return value, and can be :fragment or :verbatim.\n\nExample\n\nusing GBIF2\nsp = species_match(\"Falco punctatus\")\nocs = occurrence_search(sp)\noc = occurrence(ocs[1]; returntype=:verbatim)\n\n# output\nGBIF2.Occurrence({\n                                              \"key\": 3556750430,\n                                       \"datasetKey\": \"4fa7b334-ce0d-4e88-aaae-2e0c138d049e\",\n                                 \"publishingOrgKey\": \"e2e717bf-551a-4917-bdc9-4fa0f342c530\",\n                                  \"installationKey\": \"7182d304-b0a2-404b-baba-2086a325c221\",\n                                \"publishingCountry\": \"MU\",\n                                         \"protocol\": \"DWC_ARCHIVE\",\n                                      \"lastCrawled\": \"2022-03-02T17:41:33.833+00:00\",\n                                       \"lastParsed\": \"2022-09-08T14:55:01.342+00:00\",\n                                          \"crawlId\": 15,\n                                       \"extensions\": {},\n   \"http://rs.gbif.org/terms/1.0/publishingCountry\": \"MU\",\n             \"http://rs.tdwg.org/dwc/terms/country\": \"Mauritius\",\n      \"http://rs.tdwg.org/dwc/terms/collectionCode\": \"EBIRD\",\n               \"http://rs.tdwg.org/dwc/terms/order\": \"Falconiformes\",\n                \"http://rs.tdwg.org/dwc/terms/year\": \"2021\",\n      \"http://rs.tdwg.org/dwc/terms/vernacularName\": \"Mauritius Kestrel\",\n            \"http://rs.tdwg.org/dwc/terms/locality\": \"Ebony Forest Reserve Chamarel\",\n       \"http://rs.tdwg.org/dwc/terms/basisOfRecord\": \"HumanObservation\",\n              \"http://rs.tdwg.org/dwc/terms/family\": \"Falconidae\",\n               \"http://rs.tdwg.org/dwc/terms/month\": \"07\",\n     \"http://rs.tdwg.org/dwc/terms/decimalLatitude\": \"-20.436033\",\n      \"http://rs.tdwg.org/dwc/terms/taxonConceptID\": \"avibase-D1069C26\",\n      \"http://rs.tdwg.org/dwc/terms/scientificName\": \"Falco punctatus\",\n          \"http://rs.tdwg.org/dwc/terms/recordedBy\": \"obsr2637790\",\n       \"http://rs.tdwg.org/dwc/terms/stateProvince\": \"Black River\",\n              \"http://rs.tdwg.org/dwc/terms/phylum\": \"Chordata\",\n              \"http://rs.gbif.org/terms/1.0/gbifID\": \"3556750430\",\n                 \"http://rs.tdwg.org/dwc/terms/day\": \"15\",\n               \"http://rs.tdwg.org/dwc/terms/genus\": \"Falco\",\n             \"http://rs.tdwg.org/dwc/terms/kingdom\": \"Animalia\",\n              \"http://purl.org/dc/terms/identifier\": \"OBS1201437854\",\n               \"http://rs.tdwg.org/dwc/terms/class\": \"Aves\",\n     \"http://rs.tdwg.org/dwc/terms/individualCount\": \"1\",\n     \"http://rs.tdwg.org/dwc/terms/specificEpithet\": \"punctatus\",\n        \"http://rs.tdwg.org/dwc/terms/occurrenceID\": \"URN:catalog:CLO:EBIRD:OBS1201437854\",\n       \"http://rs.tdwg.org/dwc/terms/catalogNumber\": \"OBS1201437854\",\n    \"http://rs.tdwg.org/dwc/terms/decimalLongitude\": \"57.37246\",\n     \"http://rs.tdwg.org/dwc/terms/institutionCode\": \"CLO\",\n       \"http://rs.tdwg.org/dwc/terms/geodeticDatum\": \"WGS84\",\n    \"http://rs.tdwg.org/dwc/terms/occurrenceStatus\": \"PRESENT\"\n})\n\n\n\n\n\n","category":"function"},{"location":"#GBIF2.occurrence_request","page":"Home","title":"GBIF2.occurrence_request","text":"occurrence_request(sp::Species; kw...)\noccurrence_request(; kw...)\n\nRequest an occurrence download, returning a token that will later provide a download url. You can call occurrence_download(token) when it is ready. Prior to that, you will get 404 errors.\n\nExample\n\nHere we request to dowload all of the occurrences of the Common Myna, Acridotheres tristis.\n\njulia> sp = species_match(\"Acridotheres tristis\");\n\njulia> occurrence_count(sp)\n1936341\njulia> token = occurrence_request(sp, username=\"my_gbif_username\")\n\nThis will prompt for your password, and either throw an error or return a value for the token to use later in occurrence_download.\n\nIf you forgot to store the token and your session is still open, you can simply use occurrence_download() to download the most recent request.\n\nKeywords\n\nusername: String username for a gbif.org account\npassword: String password for a gbif.org account. The password   will be entered in the REPL if this keyword is not used.\ntype: choose from an :and or :or query.\n\nAllowed query keywords are: (:datasetKey, :year, :month, :decimalLatitude, :decimalLongitude, :elevation, :depth, :institutionCode, :collectionCode, :catalogNumber, :scientificName, :occurrenceID, :establishmentMeans, :degreeOfEstablishment, :pathway, :eventDate, :modified, :lastInterpreted, :basisOfRecord, :countryCode, :continent, :publishingCountry, :recordedBy, :identifiedBy, :recordNumber, :typeStatus, :hasCoordinate, :hasGeospatialIssues, :mediaType, :issue, :kingdomKey, :phylumKey, :classKey, :orderKey, :familyKey, :genusKey, :subgenusKey, :speciesKey, :acceptedTaxonKey, :taxonomicStatus, :repatriated, :organismID, :locality, :coordinateUncertaintyInMeters, :stateProvince, :waterBody, :level0Gid, :level1Gid, :level2Gid, :level3Gid, :protocol, :license, :publishingOrgKey, :hostingOrganizationKey, :crawlId, :installationKey, :networkKey, :eventID, :parentEventID, :samplingProtocol, :projectId, :programmeAcronym, :verbatimScientificName, :taxonID, :sampleSizeUnit, :sampleSizeValue, :organismQuantity, :organismQuantityType, :relativeOrganismQuantity, :collectionKey, :institutionKey, :recordedByID, :identifiedByID, :occurrenceStatus, :lifeStage, :isInCluster, :dwcaExtension, :iucnRedListCategory, :datasetID, :datasetName, :otherCatalogNumbers, :preparations)\n\nModifiers\n\nPrameter values can modify the kind of match by using a pair: elevation = :lessThan => 100, or using julia Fix2 operators like elevation = >(100).\n\nPair key Fix2 Description\n:equals ==(x) equality comparison\n:lessThan <(x) is less than\n:lessThanOrEquals <=(x) is less than or equals\n:greaterThan =>(x) is greater than\n:greaterThanOrEquals >=(x) greater than or equals\n:in in(x) specify multiple values to be compared\n:not !=(x) logical negation\n:and &(x) logical AND (conjuction)\n:or  (x)\n:like  search for a pattern, ? matches one character, * matches zero or more characters\n\nTo pass instead of a value:\n\n|:isNull    | has an empty value    | |:isNotNull | has a non-empty value |\n\n\n\n\n\n","category":"function"},{"location":"#GBIF2.occurrence_download","page":"Home","title":"GBIF2.occurrence_download","text":"occurrence_download([key::String]; [filename])\n\nDownload the data for an occurrence key returned by occurrence_request, or without arguments download the last result of occurrence_request.\n\nNote that occurrence_download depends on gbif.org preparing the download. Prior to it will give a 404 error as the page will not be found.\n\nThe filename keyword can be used to name the resulting file.\n\nExample\n\nRequest all the common mynor birds below 100m of elevation:\n\nsp = species_match(\"Acridotheres tristis\");\ntoken = occurrence_request(sp, username=\"my_gbif_username\", elevation=<(100))\nwrite(\"mydownloadtoken\", string(token)) # save it just in case\n# wait for your download to be prepared\n# If you need to, read the token again:\ntoken = readlines(\"mydownloadtoken\")[1]\n# And download it\nfilename = GBIF2.occurrence_download(token)\n\n\n\n\n\n","category":"function"},{"location":"#GBIF2.occurrence_count","page":"Home","title":"GBIF2.occurrence_count","text":"occurrence_count(species::Species; kw...)\noccurrence_count(; kw...)\n\nCount the number of occurrences for a taxon.\n\nExample\n\njuila> sp = species_match(\"Pteropus niger\");\n\njuila> occurrence_count(sp)\n559\n\nKeywords\n\ntaxonKey: is the most useful key when a Species is not passed.\n\nOccurrence counts have a complicated schema of allowed keyword combinations. You can access these from the GBIF api using GBIF2.occurrence_count_schema().\n\n\n\n\n\n","category":"function"},{"location":"#GBIF2.occurrence_count_schema","page":"Home","title":"GBIF2.occurrence_count_schema","text":"occurrence_count_schema()\n\nReturn the raw schema of allowed keyword/parameter combinations to be used with occurrence_count.\n\n\n\n\n\n","category":"function"},{"location":"#GBIF2.occurrence_inventory","page":"Home","title":"GBIF2.occurrence_inventory","text":"occurrence_inventory(type::Symbol; kw...)\n\nReturn the number of occurrences for a taxon based on  certain criteria. The return value is a JSON3.jl object.\n\nExample\n\njulia> country_counts = occurrence_inventory(:countries)\nJSON3.Object{Vector{UInt8}, Vector{UInt64}} with 252 entries:\n  :UNITED_STATES  => 816855696\n  :CANADA         => 133550183\n  :FRANCE         => 119683053\n  :SWEDEN         => 116451484\n  :AUSTRALIA      => 115239040\n  :UNITED_KINGDOM => 108417142\n  :NETHERLANDS    => 85750415\n  :SPAIN          => 54804973\n  :DENMARK        => 49334935\n  :GERMANY        => 49290658\n  :NORWAY         => 48337823\n  :FINLAND        => 36970838\n  :BELGIUM        => 35064346\n  :SOUTH_AFRICA   => 33185318\n  :INDIA          => 32071907\n  :MEXICO         => 26295593\n  :BRAZIL         => 24558941\n  :COSTA_RICA     => 21103286\n  :COLOMBIA       => 20143253\n  :SWITZERLAND    => 17727317\n  :PORTUGAL       => 17688228\n  ⋮               => ⋮\n\njulia> country_counts.INDIA\n32071907\n\nKeywords\n\ntype: inventory accross categories, with additional keywords from: \n\n(basisOfRecord = (), countries = :publishingCountry, datasets = (:country, :taxonKey), publishingCountry = (:publishingCountry,), year = (:year,))\n\nOccurrence counts have a complicated schema of allowed keyword combinations. You can access these from the GBIF api using occurrence_count_schema().\n\n\n\n\n\n","category":"function"},{"location":"#Low-level","page":"Home","title":"Low level","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Species and occurrences are return in a generalised Table object.","category":"page"},{"location":"","page":"Home","title":"Home","text":"GBIF2.Table\nGBIF2.enum","category":"page"},{"location":"#GBIF2.Table","page":"Home","title":"GBIF2.Table","text":"Table <: AbstractVector\n\nA generic Vector and Tables.jl compatible table to hold both Occurrence and Species data.\n\nUse as any julia AbstractArray to access species or occurrence records, or use with the Tables.jl interface to convert to a DataFrame or e.g. CSV.\n\n\n\n\n\n","category":"type"},{"location":"#GBIF2.enum","page":"Home","title":"GBIF2.enum","text":"enum()\nenum(k::Symbol)\n\nGet the enum values for the keyword k, or for all enums in a NamedTuple.\n\nEnum keywords are in (:basisOfRecord, :continent, :establishmentMeans, :habitat, :issue, :nameType, :rank, :threat, :taxonomicStatus).\n\n\n\n\n\n","category":"function"}]
}
